using System.Text;
using Cabazure.Client.SourceGenerator.Descriptors;
using Microsoft.CodeAnalysis;

namespace Cabazure.Client.SourceGenerator;

[Generator(LanguageNames.CSharp)]
public class ClientEndpointGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var endpointsToGenerate = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                TypeConstants.ClientEndpointAttribute,
                static (_, _) => true,
                static (ctx, _) => ctx);

        context.RegisterSourceOutput(
            endpointsToGenerate,
            ProcessEndpoint);
    }

    private static void ProcessEndpoint(
        SourceProductionContext context,
        GeneratorAttributeSyntaxContext syntax)
    {
        var endpoint = EndpointDescriptor.Create(
            context.ReportDiagnostic,
            syntax);
        if (endpoint == null)
        {
            return;
        }

        var source = new StringBuilder();
        source.AppendLine("// <auto-generated/>");
        source.AppendLine("#nullable enable");

        var usingStatements = endpoint
            .Usings
            .Append("using System.Net;")
            .Append("using System.Net.Http;")
            .Append("using Cabazure.Client;")
            .Append("using Cabazure.Client.Builder;")
            .Where(us => us != $"using {endpoint.Namespace};")
            .Distinct()
            .OrderByDescending(us => us.StartsWith("using System", StringComparison.Ordinal))
            .ThenBy(us => us.Contains('='))
            .ThenBy(us => us)
            .ToArray();
        if (usingStatements.Length > 0)
        {
            foreach (var us in usingStatements)
            {
                source.AppendLine(us);
            }
            source.AppendLine();
        }

        var indention = "";
        if (endpoint.Namespace != null)
        {
            source.AppendLine($"namespace {endpoint.Namespace}");
            source.AppendLine($"{{");
            indention = "    ";
        }

        source.AppendLine($$"""
            {{indention}}internal partial class {{endpoint.ClassName}} : {{endpoint.InterfaceName}}
            {{indention}}{
            {{indention}}    private readonly IHttpClientFactory factory;
            {{indention}}    private readonly IMessageRequestFactory requestFactory;
            {{indention}}
            {{indention}}    public {{endpoint.ClassName}}(
            {{indention}}        IHttpClientFactory factory,
            {{indention}}        IMessageRequestFactory requestFactory)
            {{indention}}    {
            {{indention}}        this.factory = factory;
            {{indention}}        this.requestFactory = requestFactory;
            {{indention}}    }
            """);

        foreach (var method in endpoint.Methods)
        {
            GenerateEndpointMethod(
                source,
                method,
                endpoint.ClientName,
                indention);
        }

        source.AppendLine($"{indention}}}");
        if (endpoint.Namespace != null)
        {
            source.AppendLine($"}}");
        }
        source.AppendLine("#nullable disable");

        context.AddSource(
            $"{endpoint.ClassName}.g.cs",
            source.ToString());
    }

    private static void GenerateEndpointMethod(
        StringBuilder source,
        EndpointMethodDescriptor method,
        string clientName,
        string indention)
    {
        var clientOptions = new StringBuilder();
        var requestOptions = new StringBuilder();

        foreach (var p in method.PathParameters)
        {
            requestOptions.Append($"""

                {indention}            .WithPathParameter("{p.Name}", {GetParameterValue(p)})
                """);
        }

        foreach (var p in method.QueryParameters)
        {
            requestOptions.Append($"""

                {indention}            .WithQueryParameter("{p.Name}", {GetParameterValue(p)})
                """);
        }

        foreach (var p in method.HeaderParameters)
        {
            requestOptions.Append($"""

                {indention}            .WithHeader("{p.Name}", {GetParameterValue(p)})
                """);
        }

        if (method.BodyParameter is { } b)
        {
            requestOptions.Append($"""

                {indention}            .WithBody({b})
                """);
        }

        if (method.OptionsParameter is { } o)
        {
            clientOptions.Append($"""

                {indention}            .WithRequestOptions({o})
                """);
            requestOptions.Append($"""

                {indention}            .WithRequestOptions({o})
                """);
        }

        var cancellationToken = method.CancellationTokenParameter
            ?? "CancellationToken.None";

        string? resultGeneric = null;
        if (method.ResultType is { } rt)
        {
            resultGeneric = $"<{rt}>";
        }

        var resultConversion = method.ResponseType == null
            ? null
            : $"""

                {indention}                response => new {method.ResponseType}(response),
                {indention}                
                """;

        var parameters = string.Join(
            ",",
            method.Parameters.Select(p => $"\n{indention}        {p}"));

        source.AppendLine();
        source.AppendLine($$"""
            {{indention}}    public async {{method.ReturnType}} {{method.Name}}({{parameters}})
            {{indention}}    {
            {{indention}}        var client = factory.CreateClient("{{clientName}}");
            {{indention}}
            {{indention}}        using var requestMessage = requestFactory
            {{indention}}            .FromTemplate("{{clientName}}", "{{method.RouteTemplate}}"){{requestOptions}}
            {{indention}}            .Build(HttpMethod.{{method.HttpMethod}});
            {{indention}}
            {{indention}}        using var response = await client{{clientOptions}}
            {{indention}}            .SendAsync(requestMessage, {{cancellationToken}});
            {{indention}}
            {{indention}}        return await requestFactory
            {{indention}}            .FromResponse("{{clientName}}", response)
            {{indention}}            .AddSuccessResponse{{resultGeneric}}(HttpStatusCode.OK)
            {{indention}}            .GetAsync({{resultConversion}}{{cancellationToken}});
            {{indention}}    }
            """);
    }

    private static string GetParameterValue(EndpointParameter parameter)
        => parameter switch
        {
            { ParameterType: "System.String" or "string" } => parameter.ParameterName,
            { FormatString: { } f, IsNullable: true } => $"{parameter.ParameterName}?.ToString(\"{f}\")",
            { FormatString: { } f } => $"{parameter.ParameterName}.ToString(\"{f}\")",
            { IsNullable: true } => $"{parameter.ParameterName}?.ToString()",
            _ => $"{parameter.ParameterName}.ToString()",
        };
}


