using System.Collections.Immutable;
using System.Text;
using Cabazure.Client.SourceGenerator.Descriptors;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Cabazure.Client.SourceGenerator;

[Generator(LanguageNames.CSharp)]
public class ClientInitializationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(c =>
            c.AddSource(
            "ClientInitialization.g.cs",
            $$"""
            // <auto-generated/>
            #nullable enable
            using System;
            using System.Text.Json;
            using Cabazure.Client;
            using Microsoft.Extensions.Options;

            namespace Microsoft.Extensions.DependencyInjection
            {
                internal static partial class ClientInitialization
                {
                    internal static partial IServiceCollection AddCabazureClient<TOptions>(
                        this IServiceCollection services,
                        string clientName,
                        Action<JsonSerializerOptions>? jsonOptions,
                        Action<TOptions>? clientOptions,
                        Action<IHttpClientBuilder>? builder = default)
                        where TOptions : class, ICabazureClientOptions;

                    internal static partial IServiceCollection AddCabazureClient(
                        this IServiceCollection services,
                        string clientName,
                        Action<JsonSerializerOptions>? jsonOptions,
                        Action<IHttpClientBuilder> builder);
                }
            }
            #nullable disable
            """));

        var endpoints = context.SyntaxProvider.ForAttributeWithMetadataName(
            TypeConstants.ClientEndpointAttribute,
            static (node, ct) => node is InterfaceDeclarationSyntax,
            static (ctx, ct) => EndpointReferenceDescriptor.Create(ctx))
            .Where(e => e != null)
            .Collect();

        var aotSupport = context.CompilationProvider
             .Select((options, _) => options.GetTypeByMetadataName(
                 TypeConstants.DynamicallyAccessedMembersAttribute) is { });

        context.RegisterSourceOutput(
            endpoints.Combine(aotSupport),
            GenerateInitialization);
    }

    public static void GenerateInitialization(
        SourceProductionContext context,
        (ImmutableArray<EndpointReferenceDescriptor>, bool) args)
    {
        var (endpoints, aotSupport) = args;

        var source = new StringBuilder();
        source.AppendLine("// <auto-generated/>");
        source.AppendLine("#nullable enable");

        var usingStatements = endpoints
            .Select(e => e.Namespace)
            .OfType<string>()
            .Append("System")
            .Append("System.Collections.Generic")
            .Append("System.Diagnostics.CodeAnalysis")
            .Append("System.Net.Http")
            .Append("System.Runtime.CompilerServices")
            .Append("System.Text.Json")
            .Append("Azure.Core")
            .Append("Cabazure.Client")
            .Append("Cabazure.Client.Authentication")
            .Append("Cabazure.Client.Builder")
            .Append("Microsoft.Extensions.DependencyInjection.Extensions")
            .Append("Microsoft.Extensions.Options")
            .Distinct()
            .OrderByDescending(us => us.StartsWith("System", StringComparison.Ordinal))
            .ThenBy(us => us)
            .ToArray();
        if (usingStatements.Length > 0)
        {
            foreach (var us in usingStatements)
            {
                source.AppendLine($"using {us};");
            }
            source.AppendLine();
        }

        var aotAttribute = aotSupport
            ? "[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] "
            : string.Empty;

        source.AppendLine($$"""
            namespace Microsoft.Extensions.DependencyInjection
            {
                [CompilerGenerated]
                internal static partial class ClientInitialization
                {
                    internal static partial IServiceCollection AddCabazureClient<{{aotAttribute}}TOptions>(
                        this IServiceCollection services,
                        string clientName,
                        Action<JsonSerializerOptions>? jsonOptions,
                        Action<TOptions>? clientOptions,
                        Action<IHttpClientBuilder>? builder)
                        where TOptions : class, ICabazureClientOptions
                    {
                        if (clientOptions != null)
                        {
                            services
                                .AddOptions<TOptions>()
                                .Configure(clientOptions);
                        }

                        void ConfigureHttpClient(IServiceProvider services, HttpClient client)
                            => client.BaseAddress = services
                                .GetRequiredService<IOptions<TOptions>>()
                                .Value
                                .GetBaseAddress();

                        void ConfigureAuthHandler(IList<DelegatingHandler> handlers, IServiceProvider services)
                        {
                            var options = services
                                .GetRequiredService<IOptions<TOptions>>()
                                .Value;

                            if (options is ICabazureAuthClientOptions authOptions)
                            {
                                var scopes = authOptions.GetScopes();
                                var credential = authOptions.GetCredential();

                                var tokenProvider = new BearerTokenProvider(
                                    credential,
                                    new DateTimeProvider());

                                handlers.Add(new AzureAuthenticationHandler(scopes, tokenProvider));
                            }
                        }

                        void BuildHttpClient(IHttpClientBuilder b)
                        {
                            b.ConfigureHttpClient(ConfigureHttpClient);
                            b.ConfigureAdditionalHttpMessageHandlers(ConfigureAuthHandler);
                            builder?.Invoke(b);
                        }

                        return AddCabazureClient(
                            services,
                            clientName,
                            jsonOptions,
                            BuildHttpClient);
                    }

                    internal static partial IServiceCollection AddCabazureClient(
                        this IServiceCollection services,
                        string clientName,
                        Action<JsonSerializerOptions>? jsonOptions,
                        Action<IHttpClientBuilder> builder)
                    {
                        if (jsonOptions != null)
                        {
                            services
                                .AddOptions<JsonSerializerOptions>(clientName)
                                .Configure(jsonOptions);
                        }

                        var clientBuilder = services.AddHttpClient(clientName);
                        builder.Invoke(clientBuilder);

                        services.TryAddSingleton<IClientSerializer, ClientSerializer>();
                        services.TryAddSingleton<IMessageRequestFactory, MessageRequestFactory>();
            """);

        foreach (var endpoint in endpoints)
        {
            source.AppendLine($$"""
                            services.TryAddSingleton<{{endpoint.InterfaceName}}, {{endpoint.ClassName}}>();
                """);
        }

        source.AppendLine("""
                        return services;
                    }
            """);

        source.AppendLine("    }");
        source.AppendLine("}");
        source.AppendLine("#nullable disable");

        context.AddSource(
            $"ClientInitialization.Implementation.g.cs",
            source.ToString());
    }
}