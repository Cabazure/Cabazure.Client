using System.Text;
using Cabazure.Client.SourceGenerator.Descriptors;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Cabazure.Client.SourceGenerator;

[Generator]
public class ClientInitializationGenerator : ISourceGenerator, ISyntaxContextReceiver
{
    private readonly List<EndpointDescriptor> endpoints = [];
    private readonly List<InitializationDescriptor> initializations = [];
    private readonly List<Diagnostic> diagnostics = new List<Diagnostic>();

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => this);
    }

    public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
    {
        if (context.Node is not AttributeSyntax attribute)
        {
            return;
        }

        var attributeType = context.SemanticModel
            .GetSymbolInfo(attribute).Symbol?
            .ContainingType
            .ToString();

        if (attributeType == TypeConstants.ClientEndpointAttribute)
        {
            endpoints.Add(
                EndpointDescriptor.Create(
                    context.SemanticModel,
                    attribute));
        }
        else if (attributeType == TypeConstants.ClientInitializationAttribute)
        {
            var initialization = InitializationDescriptor.Create(
                diagnostics.Add,
                context.SemanticModel,
                attribute);

            if (initialization != null)
            {
                initializations.Add(initialization);
            }
        }
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var diagnostic in diagnostics)
        {
            context.ReportDiagnostic(diagnostic);
        }

        foreach (var classGroup in initializations.GroupBy(i => i.Class))
        {
            var type = classGroup.Key;
            var source = new StringBuilder();
            source.AppendLine("// <auto-generated/>");

            var ns = type.Namespace;
            var usingStatements = endpoints
                .Select(e => e.Namespace)
                .OfType<string>()
                .Append("System.Text.Json")
                .Append("Cabazure.Client.Builder")
                .Append("Microsoft.Extensions.DependencyInjection")
                .Append("Microsoft.Extensions.DependencyInjection.Extensions")
                .Distinct()
                .Where(us => us != ns)
                .OrderByDescending(us => us.StartsWith("System"))
                .ThenBy(us => us)
                .ToArray();
            if (usingStatements.Length > 0)
            {
                foreach (var us in usingStatements)
                {
                    source.AppendLine($"using {us};");
                }
                source.AppendLine();
            }

            if (ns != null)
            {
                source.AppendLine($"namespace {ns};\n");
            }

            source.AppendLine($$"""
                {{type.Signature}}
                {
                """);

            foreach (var initialization in classGroup)
            {
                source.AppendLine($$"""
                        {{initialization.Method.Signature}}
                        {
                            var clientBuilder = services.AddHttpClient("{{initialization.ClientName}}");
                            {{initialization.Method.BuilderName}}?.Invoke(clientBuilder);

                            {{initialization.Method.ServicesName}}
                                .AddOptions<JsonSerializerOptions>("{{initialization.ClientName}}")
                                .Configure({{initialization.Method.JsonOptionsName}});

                            {{initialization.Method.ServicesName}}.TryAddSingleton<IClientSerializer, ClientSerializer>();
                            {{initialization.Method.ServicesName}}.TryAddSingleton<IMessageRequestFactory, MessageRequestFactory>();

                    """);

                var clientEndpoints = endpoints
                    .Where(e => e.ClientName == initialization.ClientName);

                foreach (var endpoint in clientEndpoints)
                {
                    source.AppendLine($$"""
                                {{initialization.Method.ServicesName}}.AddSingleton<{{endpoint.InterfaceName}}, {{endpoint.ClassName}}>();
                        """);
                }

                source.AppendLine("""
                        }
                    """);
            }

            source.AppendLine("}");

            context.AddSource(
                $"{type.Name}.g.cs",
                source.ToString());
        }
    }
}
